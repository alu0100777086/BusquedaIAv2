/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.Timer;
/**
 *
 * @author marcos
 */

public class Board extends JPanel implements ActionListener {

    /**
     * Creates new form NewJPanel
     */
    private Timer timer;
    private final int DELAY = 500;
    private map Tablero;
    
    public Board() {
        initBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initBoard() {
        
        
        try {
            loadMap();
        } catch (URISyntaxException ex) {
            Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        timer = new Timer(DELAY, this);
        
        //setPreferredSize(new Dimension(530, 530));
    }
    
    public void loadMap() throws URISyntaxException {
        Tablero = new map(Application.filas, Application.columnas);
    }
    
    @Override
    public void paintComponent(Graphics g) {
        for(int i=0;i<Application.filas;i++)
            for(int j=0;j<Application.columnas;j++)
                g.drawImage(Tablero.sprite(i, j), j*Tablero.getWidth(), i*Tablero.getHeight(), null);
        Toolkit.getDefaultToolkit().sync();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
            Tablero.move();
            repaint();
    }
    public void changespeed(int speed){
        timer.setDelay(speed);
    }
    
    public void move(){
        if (timer.isRunning()){
            timer.stop();
        }else{
            timer.start();
        }
    }
    
    public void resizethem(){
        Tablero = new map(Application.filas, Application.columnas);
        Container c = this.getParent();
        int size = Math.min(c.getHeight(), c.getWidth());
        size = Math.max(530, size);
        Tablero.displaybot();
        resizeimgs(size);
    }
    
    public void generaternd(int n){
        Tablero.generaternd(n);
        repaint();
    }
    
    public void generate(int x, int y, int type, int ori){
        Tablero.generate(x, y, type, ori);
        repaint();
    }
    
    @Override
    public Dimension getPreferredSize() {
        Container c = this.getParent();
        int size = Math.min(c.getHeight(), c.getWidth());
        size = Math.max(530, size);
        Dimension d = new Dimension(size,size);
        resizeimgs(size);
        return d;
    }
    
    public void resizeimgs(int tam){
        Tablero.resizeimages(tam);
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
